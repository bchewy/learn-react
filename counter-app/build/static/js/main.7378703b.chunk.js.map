{"version":3,"sources":["App.js","serviceWorker.js","components/counter.jsx","index.js","logo.svg"],"names":["Component","Boolean","window","location","hostname","match","Counter","state","count","imageUrl","tags","styles","fontSize","fontWeight","handleIncrement","console","log","Object","assertThisInitialized","_this","setState","handleDecrement","this","length","react_default","a","createElement","map","tag","key","Fragment","className","src","alt","style","getBadgeClasses","formatCount","onClick","renderTags","classes","ReactDOM","render","counter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mRAIkBA,YCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4EC4ESC,6MA3FbC,MAAQ,CACNC,MAAO,EACPC,SAAU,4BACVC,KAAM,CAAC,OAAQ,OAAQ,WAYzBC,OAAS,CACPC,SAAU,GACVC,WAAY,UAgBdC,gBAAkB,WAChBC,QAAQC,IAAI,oBAAZC,OAAAC,EAAA,EAAAD,QAAAC,EAAA,EAAAD,CAAAE,KAMAA,EAAKC,SAAS,CAAEZ,MAAOW,EAAKZ,MAAMC,MAAQ,OAG5Ca,gBAAkB,WAChBF,EAAKC,SAAS,CAAEZ,MAAOW,EAAKZ,MAAMC,MAAQ,iFAvB1C,OAA+B,IAA3Bc,KAAKf,MAAMG,KAAKa,OAAqBC,EAAAC,EAAAC,cAAA,+BAGvCF,EAAAC,EAAAC,cAAA,UACGJ,KAAKf,MAAMG,KAAKiB,IAAI,SAAAC,GAAG,OACtBJ,EAAAC,EAAAC,cAAA,MAAIG,IAAKD,GAAMA,uCAsBrB,OAGEJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMK,SAAP,KACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,mBACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YAAYC,IAAKV,KAAKf,MAAME,SAAUwB,IAAI,KACzDT,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,QAAMQ,MAAOZ,KAAKX,OAAQoB,UAAWT,KAAKa,mBACvCb,KAAKc,eAERZ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UACEW,QAASf,KAAKR,gBACdiB,UAAU,+BAFZ,YAMAP,EAAAC,EAAAC,cAAA,UACEW,QAASf,KAAKD,gBACdU,UAAU,8BAFZ,YAO4B,IAA3BT,KAAKf,MAAMG,KAAKa,QAAgB,2BAChCD,KAAKgB,yDAOZ,IAAIC,EAAU,mBAEd,OADAA,GAAgC,IAArBjB,KAAKf,MAAMC,MAAc,UAAY,gDAIpC,IACJA,EAAUc,KAAKf,MAAfC,MACR,OAAiB,IAAVA,EAAc,OAASA,SAxFZR,aCMtBwC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAAaC,SAASC,eAAe,SFyH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCGnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.7378703b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\n\nclass Counter extends Component {\n  state = {\n    count: 0,\n    imageUrl: \"https://picsum.photos/200\",\n    tags: [\"tag1\", \"tag2\", \"tag3\"]\n  };\n\n  // constructor() {\n  //   super();\n  //   console.log(\"Constructor\", this); //Shows this\n  //   //Sets this for handleincrement to this counter class (bind)\n  //   this.handleIncrement = this.handleIncrement.bind(this);\n  // }\n\n  // Apply styles this way\n  // Call it with style={this.styles }\n  styles = {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  };\n\n  renderTags() {\n    if (this.state.tags.length === 0) return <p>There are no tags!</p>;\n\n    return (\n      <ul>\n        {this.state.tags.map(tag => (\n          <li key={tag}>{tag}</li>\n        ))}\n      </ul>\n    );\n  }\n\n  //Arrow function syntax fix 'this' binding event handler's problem\n  handleIncrement = () => {\n    console.log(\"Increment Clicked\", this);\n    //this.state.count++; // -- Do not modify state like this directly\n    // Why not? --React does not call render() method and view is not method\n\n    // Tells react that state of component is going to change\n    // and thus render() method will be\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  handleDecrement = () => {\n    this.setState({ count: this.state.count - 1 });\n  };\n\n  render() {\n    return (\n      // React.Fragment because jsx notation is converted to\n      // React.CreateElement() and only takes in one element\n      <React.Fragment>\n        <div className=\"container-fluid\">\n          <img className=\"img-fluid\" src={this.state.imageUrl} alt=\"\" />\n          <br />\n          <span style={this.styles} className={this.getBadgeClasses()}>\n            {this.formatCount()}\n          </span>\n          <br />\n          <button\n            onClick={this.handleIncrement}\n            className=\"btn btn-primary btn-sm mr-2\"\n          >\n            Increase\n          </button>\n          <button\n            onClick={this.handleDecrement}\n            className=\"btn btn-danger btn-sm ml-2\"\n          >\n            Decrease\n          </button>\n          {/* Conditionals in JSX */}\n          {this.state.tags.length === 0 && \"Please create a new tag!\"}\n          {this.renderTags()}\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const { count } = this.state; //Picking the count property from state object\n    return count === 0 ? \"Zero\" : count;\n  }\n}\n\nexport default Counter;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Counter from \"./components/counter\";\n\nReactDOM.render(<Counter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}